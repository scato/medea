grammar Medea
{
    options
    {
        Axiom = "Script";
        Separator = "SEPARATOR";
        OutputPath = "Core\\Parser";
        Namespace = "Medea.Core.Parser";
        AccessModifier = "Public";
    }

    terminals
    {
        // https://tc39.es/ecma262/#sec-ecmascript-language-lexical-grammar
        WHITE_SPACE -> U+0020 | U+0009 | U+000B | U+000C;
        LINE_TERMINATOR -> U+000A | U+000D | U+2028 | U+2029;
        SEPARATOR   -> (WHITE_SPACE | LINE_TERMINATOR)+;

        NUMBER -> '-'? ('0' | [1-9] [0-9]*) ('.' [0-9]*)? ([Ee] [+-] [0-9]*)?;

        STRING -> '"' ([^"\\\n\r] | ('\\' .))* '"'
                | '\'' ([^'\\\n\r] | ('\\' .))* '\'';

        REGEXP -> '/' ([^/\\\n\r] | ('\\' .))* '/' (uc{L} | uc{Nl} | '$' | '_')*;

        IDENTIFIER -> (uc{L} | uc{Nl} | '$' | '_') (uc{L} | uc{Nl} | uc{Mn} | uc{Mc} | uc{Nd} | uc{Pc} | '$')*;
    }

    rules
    {
        Script -> Statement ';'!;

        // see https://s3.amazonaws.com/artifacts.opencypher.org/M18/railroad/Cypher.html#Query
        Statement -> Query^;

        Query -> ReadingClause+ UpdatingClause?;
        Query -> UpdatingClause;

        ReadingClause -> Load^;
        ReadingClause -> Match^;

        Load -> ~'LOAD'! (~'RAW') ~'FROM'! StringPattern ~'AS'! Pattern;
        Match -> ~'MATCH'! Pattern;

        UpdatingClause -> Return^;

        Return -> ~'RETURN'! Expression;

        // see https://tc39.es/ecma262/#sec-destructuring-assignment
        Pattern -> PrimaryPattern^;

        PrimaryPattern -> IdentifierReference^;
        PrimaryPattern -> Literal^;

        // StringPattern is a specific pattern type for Load and TemplatePattern
        StringPattern -> IdentifierReference^;
        StringPattern -> StringLiteral^;

        // see https://tc39.es/ecma262/#prod-Expression
        Expression -> CallExpression^;

        CallExpression -> PrimaryExpression ('.'! IDENTIFIER Arguments)+;
        CallExpression -> PrimaryExpression^;

        Arguments -> '('! ')'!;
        Arguments -> '('! Argument (','! Argument)* ','!? ')'!;
        Argument -> Expression^;
        Argument -> SpreadArgument;
        SpreadArgument -> '...'! Expression;

        PrimaryExpression -> IdentifierReference^;
        PrimaryExpression -> Literal^;
        PrimaryExpression -> RegularExpressionLiteral^;

        IdentifierReference -> IDENTIFIER;

        Literal -> NumericLiteral^;
        Literal -> StringLiteral^;

        NumericLiteral -> NUMBER;
        StringLiteral -> STRING;

        RegularExpressionLiteral -> REGEXP;
    }
}
