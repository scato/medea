/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 3.5.1.0
 */
using System.CodeDom.Compiler;
using System.Collections.Generic;
using Hime.Redist;
using Hime.Redist.Parsers;

namespace Medea.Core.Parser
{
	/// <summary>
	/// Represents a parser
	/// </summary>
	[GeneratedCodeAttribute("Hime.SDK", "3.5.1.0")]
	public class MedeaParser : LRkParser
	{
		/// <summary>
		/// The automaton for this parser
		/// </summary>
		private static readonly LRkAutomaton commonAutomaton = LRkAutomaton.Find(typeof(MedeaParser), "MedeaParser.bin");
		/// <summary>
		/// Contains the constant IDs for the variables and virtuals in this parser
		/// </summary>
		[GeneratedCodeAttribute("Hime.SDK", "3.5.1.0")]
		public class ID
		{
			/// <summary>
			/// The unique identifier for variable Script
			/// </summary>
			public const int VariableScript = 0x0009;
			/// <summary>
			/// The unique identifier for variable Statement
			/// </summary>
			public const int VariableStatement = 0x000A;
			/// <summary>
			/// The unique identifier for variable Query
			/// </summary>
			public const int VariableQuery = 0x000B;
			/// <summary>
			/// The unique identifier for variable UpdatingClause
			/// </summary>
			public const int VariableUpdatingClause = 0x000C;
			/// <summary>
			/// The unique identifier for variable Return
			/// </summary>
			public const int VariableReturn = 0x000D;
			/// <summary>
			/// The unique identifier for variable Expression
			/// </summary>
			public const int VariableExpression = 0x000E;
			/// <summary>
			/// The unique identifier for variable Literal
			/// </summary>
			public const int VariableLiteral = 0x000F;
			/// <summary>
			/// The unique identifier for variable NumericLiteral
			/// </summary>
			public const int VariableNumericLiteral = 0x0010;
		}
		/// <summary>
		/// The collection of variables matched by this parser
		/// </summary>
		/// <remarks>
		/// The variables are in an order consistent with the automaton,
		/// so that variable indices in the automaton can be used to retrieve the variables in this table
		/// </remarks>
		private static readonly Symbol[] variables = {
			new Symbol(0x0009, "Script"), 
			new Symbol(0x000A, "Statement"), 
			new Symbol(0x000B, "Query"), 
			new Symbol(0x000C, "UpdatingClause"), 
			new Symbol(0x000D, "Return"), 
			new Symbol(0x000E, "Expression"), 
			new Symbol(0x000F, "Literal"), 
			new Symbol(0x0010, "NumericLiteral"), 
			new Symbol(0x0013, "__VAxiom") };
		/// <summary>
		/// The collection of virtuals matched by this parser
		/// </summary>
		/// <remarks>
		/// The virtuals are in an order consistent with the automaton,
		/// so that virtual indices in the automaton can be used to retrieve the virtuals in this table
		/// </remarks>
		private static readonly Symbol[] virtuals = {
 };
		/// <summary>
		/// Initializes a new instance of the parser
		/// </summary>
		/// <param name="lexer">The input lexer</param>
		public MedeaParser(MedeaLexer lexer) : base (commonAutomaton, variables, virtuals, null, lexer) { }

		/// <summary>
		/// Visitor interface
		/// </summary>
		[GeneratedCodeAttribute("Hime.SDK", "3.5.1.0")]
		public class Visitor
		{
			public virtual void OnTerminalWhiteSpace(ASTNode node) {}
			public virtual void OnTerminalSeparator(ASTNode node) {}
			public virtual void OnTerminalInteger(ASTNode node) {}
			public virtual void OnTerminalFraction(ASTNode node) {}
			public virtual void OnTerminalExponent(ASTNode node) {}
			public virtual void OnTerminalNumber(ASTNode node) {}
			public virtual void OnVariableScript(ASTNode node) {}
			public virtual void OnVariableStatement(ASTNode node) {}
			public virtual void OnVariableQuery(ASTNode node) {}
			public virtual void OnVariableUpdatingClause(ASTNode node) {}
			public virtual void OnVariableReturn(ASTNode node) {}
			public virtual void OnVariableExpression(ASTNode node) {}
			public virtual void OnVariableLiteral(ASTNode node) {}
			public virtual void OnVariableNumericLiteral(ASTNode node) {}
		}

		/// <summary>
		/// Walk the AST of a result using a visitor
		/// <param name="result">The parse result</param>
		/// <param name="visitor">The visitor to use</param>
		/// </summary>
		public static void Visit(ParseResult result, Visitor visitor)
		{
			VisitASTNode(result.Root, visitor);
		}

		/// <summary>
		/// Walk the sub-AST from the specified node using a visitor
		/// </summary>
		/// <param name="node">The AST node to start from</param>
		/// <param name="visitor">The visitor to use</param>
		public static void VisitASTNode(ASTNode node, Visitor visitor)
		{
			for (int i = 0; i < node.Children.Count; i++)
				VisitASTNode(node.Children[i], visitor);
			switch(node.Symbol.ID)
			{
				case 0x0003: visitor.OnTerminalWhiteSpace(node); break;
				case 0x0004: visitor.OnTerminalSeparator(node); break;
				case 0x0005: visitor.OnTerminalInteger(node); break;
				case 0x0006: visitor.OnTerminalFraction(node); break;
				case 0x0007: visitor.OnTerminalExponent(node); break;
				case 0x0008: visitor.OnTerminalNumber(node); break;
				case 0x0009: visitor.OnVariableScript(node); break;
				case 0x000A: visitor.OnVariableStatement(node); break;
				case 0x000B: visitor.OnVariableQuery(node); break;
				case 0x000C: visitor.OnVariableUpdatingClause(node); break;
				case 0x000D: visitor.OnVariableReturn(node); break;
				case 0x000E: visitor.OnVariableExpression(node); break;
				case 0x000F: visitor.OnVariableLiteral(node); break;
				case 0x0010: visitor.OnVariableNumericLiteral(node); break;
			}
		}
	}
}
