/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 3.5.1.0
 */
using System.CodeDom.Compiler;
using System.Collections.Generic;
using Hime.Redist;
using Hime.Redist.Parsers;

namespace Medea.Core.Parser
{
	/// <summary>
	/// Represents a parser
	/// </summary>
	[GeneratedCodeAttribute("Hime.SDK", "3.5.1.0")]
	public class MedeaParser : LRkParser
	{
		/// <summary>
		/// The automaton for this parser
		/// </summary>
		private static readonly LRkAutomaton commonAutomaton = LRkAutomaton.Find(typeof(MedeaParser), "MedeaParser.bin");
		/// <summary>
		/// Contains the constant IDs for the variables and virtuals in this parser
		/// </summary>
		[GeneratedCodeAttribute("Hime.SDK", "3.5.1.0")]
		public class ID
		{
			/// <summary>
			/// The unique identifier for variable Script
			/// </summary>
			public const int VariableScript = 0x0008;
			/// <summary>
			/// The unique identifier for variable Statement
			/// </summary>
			public const int VariableStatement = 0x0009;
			/// <summary>
			/// The unique identifier for variable Query
			/// </summary>
			public const int VariableQuery = 0x000A;
			/// <summary>
			/// The unique identifier for variable ReadingClause
			/// </summary>
			public const int VariableReadingClause = 0x000B;
			/// <summary>
			/// The unique identifier for variable Load
			/// </summary>
			public const int VariableLoad = 0x000C;
			/// <summary>
			/// The unique identifier for variable UpdatingClause
			/// </summary>
			public const int VariableUpdatingClause = 0x000D;
			/// <summary>
			/// The unique identifier for variable Return
			/// </summary>
			public const int VariableReturn = 0x000E;
			/// <summary>
			/// The unique identifier for variable Pattern
			/// </summary>
			public const int VariablePattern = 0x000F;
			/// <summary>
			/// The unique identifier for variable PrimaryPattern
			/// </summary>
			public const int VariablePrimaryPattern = 0x0010;
			/// <summary>
			/// The unique identifier for variable Expression
			/// </summary>
			public const int VariableExpression = 0x0011;
			/// <summary>
			/// The unique identifier for variable PrimaryExpression
			/// </summary>
			public const int VariablePrimaryExpression = 0x0012;
			/// <summary>
			/// The unique identifier for variable IdentifierReference
			/// </summary>
			public const int VariableIdentifierReference = 0x0013;
			/// <summary>
			/// The unique identifier for variable Literal
			/// </summary>
			public const int VariableLiteral = 0x0014;
			/// <summary>
			/// The unique identifier for variable NumericLiteral
			/// </summary>
			public const int VariableNumericLiteral = 0x0015;
			/// <summary>
			/// The unique identifier for variable StringLiteral
			/// </summary>
			public const int VariableStringLiteral = 0x0016;
		}
		/// <summary>
		/// The collection of variables matched by this parser
		/// </summary>
		/// <remarks>
		/// The variables are in an order consistent with the automaton,
		/// so that variable indices in the automaton can be used to retrieve the variables in this table
		/// </remarks>
		private static readonly Symbol[] variables = {
			new Symbol(0x0008, "Script"), 
			new Symbol(0x0009, "Statement"), 
			new Symbol(0x000A, "Query"), 
			new Symbol(0x000B, "ReadingClause"), 
			new Symbol(0x000C, "Load"), 
			new Symbol(0x000D, "UpdatingClause"), 
			new Symbol(0x000E, "Return"), 
			new Symbol(0x000F, "Pattern"), 
			new Symbol(0x0010, "PrimaryPattern"), 
			new Symbol(0x0011, "Expression"), 
			new Symbol(0x0012, "PrimaryExpression"), 
			new Symbol(0x0013, "IdentifierReference"), 
			new Symbol(0x0014, "Literal"), 
			new Symbol(0x0015, "NumericLiteral"), 
			new Symbol(0x0016, "StringLiteral"), 
			new Symbol(0x0018, "__V24"), 
			new Symbol(0x001E, "__VAxiom") };
		/// <summary>
		/// The collection of virtuals matched by this parser
		/// </summary>
		/// <remarks>
		/// The virtuals are in an order consistent with the automaton,
		/// so that virtual indices in the automaton can be used to retrieve the virtuals in this table
		/// </remarks>
		private static readonly Symbol[] virtuals = {
 };
		/// <summary>
		/// Initializes a new instance of the parser
		/// </summary>
		/// <param name="lexer">The input lexer</param>
		public MedeaParser(MedeaLexer lexer) : base (commonAutomaton, variables, virtuals, null, lexer) { }

		/// <summary>
		/// Visitor interface
		/// </summary>
		[GeneratedCodeAttribute("Hime.SDK", "3.5.1.0")]
		public class Visitor
		{
			public virtual void OnTerminalWhiteSpace(ASTNode node) {}
			public virtual void OnTerminalSeparator(ASTNode node) {}
			public virtual void OnTerminalNumber(ASTNode node) {}
			public virtual void OnTerminalString(ASTNode node) {}
			public virtual void OnTerminalIdentifier(ASTNode node) {}
			public virtual void OnVariableScript(ASTNode node) {}
			public virtual void OnVariableStatement(ASTNode node) {}
			public virtual void OnVariableQuery(ASTNode node) {}
			public virtual void OnVariableReadingClause(ASTNode node) {}
			public virtual void OnVariableLoad(ASTNode node) {}
			public virtual void OnVariableUpdatingClause(ASTNode node) {}
			public virtual void OnVariableReturn(ASTNode node) {}
			public virtual void OnVariablePattern(ASTNode node) {}
			public virtual void OnVariablePrimaryPattern(ASTNode node) {}
			public virtual void OnVariableExpression(ASTNode node) {}
			public virtual void OnVariablePrimaryExpression(ASTNode node) {}
			public virtual void OnVariableIdentifierReference(ASTNode node) {}
			public virtual void OnVariableLiteral(ASTNode node) {}
			public virtual void OnVariableNumericLiteral(ASTNode node) {}
			public virtual void OnVariableStringLiteral(ASTNode node) {}
		}

		/// <summary>
		/// Walk the AST of a result using a visitor
		/// <param name="result">The parse result</param>
		/// <param name="visitor">The visitor to use</param>
		/// </summary>
		public static void Visit(ParseResult result, Visitor visitor)
		{
			VisitASTNode(result.Root, visitor);
		}

		/// <summary>
		/// Walk the sub-AST from the specified node using a visitor
		/// </summary>
		/// <param name="node">The AST node to start from</param>
		/// <param name="visitor">The visitor to use</param>
		public static void VisitASTNode(ASTNode node, Visitor visitor)
		{
			for (int i = 0; i < node.Children.Count; i++)
				VisitASTNode(node.Children[i], visitor);
			switch(node.Symbol.ID)
			{
				case 0x0003: visitor.OnTerminalWhiteSpace(node); break;
				case 0x0004: visitor.OnTerminalSeparator(node); break;
				case 0x0005: visitor.OnTerminalNumber(node); break;
				case 0x0006: visitor.OnTerminalString(node); break;
				case 0x0007: visitor.OnTerminalIdentifier(node); break;
				case 0x0008: visitor.OnVariableScript(node); break;
				case 0x0009: visitor.OnVariableStatement(node); break;
				case 0x000A: visitor.OnVariableQuery(node); break;
				case 0x000B: visitor.OnVariableReadingClause(node); break;
				case 0x000C: visitor.OnVariableLoad(node); break;
				case 0x000D: visitor.OnVariableUpdatingClause(node); break;
				case 0x000E: visitor.OnVariableReturn(node); break;
				case 0x000F: visitor.OnVariablePattern(node); break;
				case 0x0010: visitor.OnVariablePrimaryPattern(node); break;
				case 0x0011: visitor.OnVariableExpression(node); break;
				case 0x0012: visitor.OnVariablePrimaryExpression(node); break;
				case 0x0013: visitor.OnVariableIdentifierReference(node); break;
				case 0x0014: visitor.OnVariableLiteral(node); break;
				case 0x0015: visitor.OnVariableNumericLiteral(node); break;
				case 0x0016: visitor.OnVariableStringLiteral(node); break;
			}
		}
	}
}
